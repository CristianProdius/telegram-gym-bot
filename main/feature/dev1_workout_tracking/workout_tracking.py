# workout_tracking.py
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from .db import SessionLocal
from .models import Workout
import re
from datetime import datetime, timezone, date, timedelta
from sqlalchemy import select, extract
from .userProfiling import get_or_create_user, get_user_by_telegram_id,increment_workout_count,get_user_profile,ensure_aware_datetime

# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–∞ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ

@router.message(Command("log"))
async def log_workout(m: Message):
    user = get_user_by_telegram_id(m.from_user.id)
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        user = get_or_create_user(
            telegram_id=m.from_user.id,
            username=m.from_user.username,
            first_name=m.from_user.first_name,
            last_name=m.from_user.last_name
        )
    # ... (–≤–µ—Å—å –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    parts = m.text.strip().split(maxsplit=2)
    if len(parts) < 3:
        return await m.answer("–§–æ—Ä–º–∞—Ç: /log Exercise 3x10x50")

    exercise = parts[1]
    m2 = re.match(r"^(\d+)x(\d+)x(\d+)$", parts[2])
    if not m2:
        return await m.answer("–ü—Ä–∏–º–µ—Ä: /log BenchPress 3x10x50")

    sets, reps, weight = map(int, m2.groups())

    session = SessionLocal()
    try:
        w = Workout(
            user_id=m.from_user.id,
            exercise=exercise,
            sets=sets,
            reps=reps,
            weight=weight,
            created_at=datetime.now(timezone.utc),
        )
        session.add(w)
        session.commit()
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        increment_workout_count(m.from_user.id)

        await m.answer(f"–ó–∞–ø–∏—Å–∞–ª: {exercise} ‚Äî {sets}x{reps}x{weight} –∫–≥ ‚úÖ")
    finally:
        session.close()


@router.message(Command("today"))
async def today(m: Message):
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
        today_date = date.today()

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        q = (select(Workout)
             .where(Workout.user_id == m.from_user.id)
             .where(Workout.created_at >= today_date)
             .order_by(Workout.created_at.asc()))  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º

        rows = session.execute(q).scalars().all()

        if not rows:
            return await m.answer(f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({today_date:%d.%m.%Y}) –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å —Å–µ—Ç–∞–º–∏, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ –∏ –≤–µ—Å–æ–º
        lines = [f"{r.created_at:%H:%M} - {r.exercise} {r.sets}x{r.reps}x{r.weight}–∫–≥" for r in rows]

        await m.answer(
            f"‚ùï –§–æ—Ä–º–∞—Ç: –í—Ä–µ–º—è - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –°–µ—Ç—ã —Ö –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ö –í–µ—Å \n" +
            f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è ({today_date:%d.%m.%Y}):\n \n" +
            "\n".join(lines)
        )
    finally:
        session.close()


from datetime import datetime


@router.message(Command("check_training"))
async def check_training(m: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    parts = m.text.split()
    if len(parts) != 2:
        return await m.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /check_training –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: /check_training 03.09.2025")

    date_str = parts[1]

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
    try:
        target_date = datetime.strptime(date_str, "%d.%m.%Y").date()
    except ValueError:
        return await m.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 03.09.2025")

    session = SessionLocal()
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        q = (select(Workout)
             .where(Workout.user_id == m.from_user.id)
             .where(Workout.created_at >= target_date)
             .where(Workout.created_at < target_date + timedelta(days=1))
             .order_by(Workout.created_at.asc()))

        rows = session.execute(q).scalars().all()

        if not rows:
            return await m.answer(f"üìù –ó–∞ {target_date:%d.%m.%Y} –∑–∞–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç.")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        lines = [f"{r.created_at:%H:%M} - {r.exercise} {r.sets}x{r.reps}x{r.weight}–∫–≥" for r in rows]

        await m.answer(
            f"‚ùï –§–æ—Ä–º–∞—Ç: –í—Ä–µ–º—è - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –°–µ—Ç—ã —Ö –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ö –í–µ—Å \n" +
            f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∑–∞ {target_date:%d.%m.%Y}:\n \n" +
            "\n".join(lines)
        )
    finally:
        session.close()

@router.message(Command("list_trainings"))
async def list_trainings(m: Message):
    session = SessionLocal()
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        parts = m.text.split()
        year = None

        if len(parts) == 1:
            # /list_trainings - —Ç–µ–∫—É—â–∏–π –≥–æ–¥
            year = datetime.now().year
        elif len(parts) == 2:
            # /list_trainings –≥–æ–¥
            try:
                year = int(parts[1])
                if year < 2000 or year > 2100:
                    return await m.answer("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 2000 –∏ 2100")
            except ValueError:
                return await m.answer(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /list_trainings [–≥–æ–¥]\n–ü—Ä–∏–º–µ—Ä: /list_trainings 2024")
        else:
            return await m.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /list_trainings [–≥–æ–¥]\n–ü—Ä–∏–º–µ—Ä: /list_trainings 2024")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥
        q = (select(Workout)
             .where(Workout.user_id == m.from_user.id)
             .where(extract('year', Workout.created_at) == year)
             .order_by(Workout.created_at.asc()))

        rows = session.execute(q).scalars().all()

        if not rows:
            return await m.answer(f"üìù –ó–∞ {year} –≥–æ–¥ –∑–∞–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç.")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_data = {}
        for r in rows:
            month = r.created_at.month
            day = r.created_at.day
            if month not in monthly_data:
                monthly_data[month] = []
            monthly_data[month].append(day)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –¥–µ–Ω—å)
        for month in monthly_data:
            monthly_data[month] = sorted(set(monthly_data[month]))

        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        month_names = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
            5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
            9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        lines = []
        for month_num in sorted(monthly_data.keys()):
            month_name = month_names.get(month_num, f"–ú–µ—Å—è—Ü {month_num}")
            days = ", ".join(map(str, monthly_data[month_num]))
            lines.append(f"{month_name}: {days}")

        await m.answer(
            f"‚ùï –§–æ—Ä–º–∞—Ç: –ú–µ—Å—è—Ü: –ß–∏—Å–ª–∞ \n \n" +
            f"–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ {year} –≥–æ–¥—É:\n\n" +
            "\n".join(lines)
        )

    finally:
        session.close()


@router.message(Command("profile"))
async def show_profile(m: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.
    """
    profile_data = get_user_profile(m.from_user.id)

    if not profile_data or not profile_data['user']:
        return await m.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    user = profile_data['user']

    created_at = ensure_aware_datetime(user.created_at)
    updated_at = ensure_aware_datetime(user.updated_at)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    profile_text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
    profile_text += f"üÜî ID: <code>{user.telegram_id}</code>\n"
    profile_text += f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"üìõ –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    profile_text += f"üåê Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"üó£ –Ø–∑—ã–∫: {user.language}\n"
    profile_text += f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+{user.timezone_offset}\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    profile_text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
    profile_text += f"üìä –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {profile_data['total_workouts']}\n"
    profile_text += f"üî¢ –ó–∞–ø–∏—Å–µ–π –≤ –±–æ—Ç–µ: {user.workout_count}\n"

    if profile_data['first_workout']:
        first_date = profile_data['first_workout'].strftime("%d.%m.%Y")
        profile_text += f"üìÖ –ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {first_date}\n"

    if profile_data['last_workout']:
        last_date = profile_data['last_workout'].strftime("%d.%m.%Y")
        profile_text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {last_date}\n"

    profile_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at.strftime('%d.%m.%Y %H:%M')}\n"
    profile_text += f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    profile_text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫</i>"

    await m.answer(profile_text, parse_mode="HTML")


@router.message(Command("stats"))
async def show_stats(m: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
    """
    profile_data = get_user_profile(m.from_user.id)

    if not profile_data:
        return await m.answer("üìä –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è aware datetime
    now_utc = ensure_aware_datetime(datetime.now(timezone.utc))
    created_at = ensure_aware_datetime(profile_data['user'].created_at)

    days_active = (now_utc - created_at).days

    stats_text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    stats_text += f"üèãÔ∏è‚Äç‚ôÇÔ∏è –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {profile_data['total_workouts']}\n"

    if profile_data['last_workout']:
        last_workout = ensure_aware_datetime(profile_data['last_workout'])
        last_date = last_workout.strftime("%d.%m.%Y")
        stats_text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {last_date}\n"

    stats_text += f"üìÖ –ê–∫—Ç–∏–≤–µ–Ω –¥–Ω–µ–π: {days_active}\n"

    if days_active > 0:
        avg_workouts = profile_data['total_workouts'] / days_active
        stats_text += f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {avg_workouts:.1f} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
    else:
        stats_text += "üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: 0 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"

    await m.answer(stats_text, parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –∏–∑ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —É–¥–æ–±–Ω–æ)
def get_router():
    return router